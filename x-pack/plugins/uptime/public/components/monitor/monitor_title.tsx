/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import React, { useContext } from 'react';
import {
  EuiBadge,
  EuiFlexGroup,
  EuiFlexItem,
  EuiSpacer,
  EuiLink,
  EuiText,
  EuiButton,
} from '@elastic/eui';
import { useHistory } from 'react-router-dom';
import { FormattedMessage } from '@kbn/i18n-react';
import { useSelector } from 'react-redux';
import { MONITOR_EDIT_PATH, MONITOR_EDIT_ELASTIC_AGENT_PATH } from '../../../common/constants/ui';
import { useMonitorId } from '../../hooks';
import { monitorStatusSelector } from '../../state/selectors';
import { EnableMonitorAlert } from '../overview/monitor_list/columns/enable_alert';
import { Ping } from '../../../common/runtime_types/ping';
import { useBreadcrumbs } from '../../hooks/use_breadcrumbs';
import { UptimeSettingsContext } from '../../contexts';

const isAutogeneratedId = (id: string) => {
  const autoGeneratedId = /^auto-(icmp|http|tcp|browser)-0X[A-F0-9]{16}.*/;
  return autoGeneratedId.test(id);
};

// For monitors with no explicit ID, we display the URL instead of the
// auto-generated ID because it is difficult to derive meaning from a
// generated id like `auto-http-0X8D6082B94BBE3B8A`.
// We may deprecate this behavior in the next major release, because
// the heartbeat config will require an explicit ID.
const getPageTitle = (monitorId: string, selectedMonitor: Ping | null) => {
  if (isAutogeneratedId(monitorId)) {
    return selectedMonitor?.url?.full || monitorId;
  }
  return monitorId;
};

export const MonitorPageTitleContent: React.FC = () => {
  const history = useHistory();
  const { basePath } = useContext(UptimeSettingsContext);
  const monitorId = useMonitorId();
  const selectedMonitor = useSelector(monitorStatusSelector);
  const type = selectedMonitor?.monitor?.type;
  const isElasticAgentMonitor = selectedMonitor?.is_elastic_agent_monitor;
  const isBrowser = type === 'browser';
  const renderMonitorType = (monitorType: string) => {
    switch (monitorType) {
      case 'http':
        return (
          <FormattedMessage
            id="xpack.uptime.monitorDetails.title.pingType.http"
            defaultMessage="HTTP ping"
          />
        );
      case 'tcp':
        return (
          <FormattedMessage
            id="xpack.uptime.monitorDetails.title.pingType.tcp"
            defaultMessage="TCP ping"
          />
        );
      case 'icmp':
        return (
          <FormattedMessage
            id="xpack.uptime.monitorDetails.title.pingType.icmp"
            defaultMessage="ICMP ping"
          />
        );
      case 'browser':
        return (
          <FormattedMessage
            id="xpack.uptime.monitorDetails.title.pingType.browser"
            defaultMessage="Browser"
          />
        );
      default:
        return '';
    }
  };
  return (
    <>
      <EuiFlexGroup wrap={false} data-test-subj="monitorTitle" alignItems="center">
        <EuiFlexItem grow={false} style={{ justifyContent: 'center' }}>
          <EuiButton
            href={history.createHref({
              pathname: `${
                isElasticAgentMonitor ? MONITOR_EDIT_ELASTIC_AGENT_PATH : MONITOR_EDIT_PATH
              }/${Buffer.from(monitorId, 'utf8').toString('base64')}`,
            })}
          >
            Edit monitor
          </EuiButton>
        </EuiFlexItem>
        {isElasticAgentMonitor && (
          <EuiFlexItem grow={false}>
            <EuiLink
              external={true}
              target="_blank"
              href={`${basePath}/app/fleet/agents/${monitorId}`} // TODO: Replace with a locator
            >
              View Elastic Agent
            </EuiLink>
          </EuiFlexItem>
        )}
      </EuiFlexGroup>

      <EuiFlexGroup wrap={false} data-test-subj="monitorTitle">
        <EuiFlexItem grow={false} style={{ justifyContent: 'center' }}>
          <EnableMonitorAlert monitorId={monitorId} selectedMonitor={selectedMonitor!} />
        </EuiFlexItem>
      </EuiFlexGroup>
      <EuiSpacer size="s" />
      <EuiFlexGroup wrap={false} gutterSize="s" alignItems="center">
        <EuiFlexItem grow={false}>
          {isBrowser && type && (
            <EuiBadge color="hollow">
              {renderMonitorType(type)}{' '}
              <FormattedMessage
                id="xpack.uptime.monitorDetails.title.disclaimer.description"
                defaultMessage="(BETA)"
              />
            </EuiBadge>
          )}
        </EuiFlexItem>
        {isBrowser && (
          <EuiFlexItem grow={false}>
            <EuiText>
              <EuiLink href="https://www.elastic.co/what-is/synthetic-monitoring" target="_blank">
                <FormattedMessage
                  id="xpack.uptime.monitorDetails.title.disclaimer.link"
                  defaultMessage="See more"
                />
              </EuiLink>
            </EuiText>
          </EuiFlexItem>
        )}
      </EuiFlexGroup>
    </>
  );
};

export const MonitorPageTitle: React.FC = () => {
  const monitorId = useMonitorId();

  const selectedMonitor = useSelector(monitorStatusSelector);

  const nameOrId = selectedMonitor?.monitor?.name || getPageTitle(monitorId, selectedMonitor);

  useBreadcrumbs([{ text: nameOrId }]);

  return <span className="eui-textNoWrap">{nameOrId}</span>;
};
